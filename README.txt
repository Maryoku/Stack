Задания для практических занятий по теме
«Структуры данных: стек. Реализация с помощью массива и связного списка»

1) Реализовать АТД стек на основе массива и на основе ссылочного списка. Для каждой из двух реализаций у вас должно быть 5 функций:

        int Pop(void);//возвращает последний элемент стека
        bool Push(int elem);//помещает elem в стек, возвращает 1 в случае успеха и 0 в случае ошибки при помещении в стек
        bool IsEmpty(void);//возвращает 1, если стек пуст; в противном случае - 0 
        int Top(void);// возвращает значение, хранящееся в вершине стека

Прим. В случае реализации на списках элементом стека является 
struct Node{
int value;//значение 
int *next;//указатель на следующий элемент
}

2) Сравнить эффективность двух реализаций. Для этого сгенерировать последовательность операций со стеком из 10^7 действий (хранить в памяти). Затем проделать указанную последовательность операций с двумя реализациями стека, измеряя при этом продолжительность этой процедуры.
3) Повторите п.2) для трех различных типов последовательностей операций (обоснуйте выбор тестовых последовательностей).
4) Реализовать процедуру сортировки элементов стека, используя только функции работы со стеком и вспомогательные переменные (возможно использование нескольких стеков, но нельзя использовать массивы или другие структуры данных, кроме стека).
5) Измерить скорость работы процедуры шага 4 для различных реализаций. Для этого подготовить тестовую программу, содержащую реализации стека и процедуры сортировки, а также производящую следующие действия:
   а) открытие файла data.txt и считывание в стек его содержимого (в файле хранятся 50000 целых чисел по одному в каждой строке);
   б) сортировка содержимого стека с одновременным замером затраченного на это время;
   в) повторить шаги а) и б) для второй реализации стека;
   г) вывод на экран сообщение вида:

       реализация с помощью массива: x секунд
       реализация с помощью списка : y секунд
       Точность измерений до 0.001 с.

6) В строку выписан большой список действительных чисел (порядка нескольких миллионов записей). Для каждого числа из списка определить ближайшее к нему справа число, большее его самого. Результат оформить в виде файла, в котором сформировать строки вида
<число из списка> <найденное ближайшее>
Если ближайшего большего для очередного числа не нашлось, то вместо найденного числа вывести -1.
Сформировать набор тестовых списков чисел и объяснить почему были выбраны такие тестовые последовательности.
Обязательное требование при проверке: оптимальность алгоритма, выражаемая в высокой скорости. 
